generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["nativeTypes", "groupBy"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Clientupdate {
  id        Int      @id @default(autoincrement())
  timestamp DateTime
  version   String
  country   String?
  useragent String?

  @@map("clientupdates")
}

model Event {
  id           Int      @id @default(autoincrement())
  securityId   Int      @map("security_id")
  date         DateTime
  type         String
  amount       Decimal?
  currencyCode String?  @map("currency_code")
  ratio        String?
  security     Security @relation(fields: [securityId], references: [id])

  @@map("events")
}

model Exchangerate {
  id                Int                 @id @default(autoincrement())
  baseCurrencyCode  String              @map("base_currency_code")
  quoteCurrencyCode String              @map("quote_currency_code")
  prices            ExchangeratePrice[]

  @@unique([baseCurrencyCode, quoteCurrencyCode])
  @@map("exchangerates")
}

model ExchangeratePrice {
  id             Int          @id @default(autoincrement())
  date           DateTime
  value          Decimal
  exchangerateId Int          @map("exchangerate_id")
  exchangerate   Exchangerate @relation(fields: [exchangerateId], references: [id])

  @@unique([exchangerateId, date])
  @@map("exchangerates_prices")
}

model Market {
  id             Int       @id @default(autoincrement())
  securityId     Int       @map("security_id")
  marketCode     String    @map("market_code")
  currencyCode   String?   @map("currency_code")
  firstPriceDate DateTime? @map("first_price_date")
  lastPriceDate  DateTime? @map("last_price_date")
  symbol         String?   @db.VarChar(10)
  updatePrices   Boolean   @map("update_prices")
  security       Security  @relation(fields: [securityId], references: [id])
  prices         Price[]

  @@unique([securityId, marketCode])
  @@map("markets")
}

model Price {
  id       Int      @id @default(autoincrement())
  marketId Int      @map("market_id")
  date     DateTime
  close    Decimal
  market   Market   @relation(fields: [marketId], references: [id])

  @@unique([marketId, date])
  @@map("prices")
}

model Security {
  id                 Int                @id @default(autoincrement())
  uuid               String?            @unique
  name               String?
  isin               String?
  wkn                String?
  symbolXfra         String?            @map("symbol_xfra")
  symbolXnas         String?            @map("symbol_xnas")
  symbolXnys         String?            @map("symbol_xnys")
  securityType       String?            @map("security_type")
  events             Event[]
  markets            Market[]
  securityTaxonomies SecurityTaxonomy[] @relation("securitiesTosecurities_taxonomies")

  @@map("securities")
}

model SecurityTaxonomy {
  taxonomyUuid String   @map("taxonomy_uuid")
  securityUuid String   @map("security_uuid")
  weight       Decimal
  security     Security @relation("securitiesTosecurities_taxonomies", fields: [securityUuid], references: [uuid])
  taxonomy     Taxonomy @relation("securities_taxonomiesTotaxonomies", fields: [taxonomyUuid], references: [uuid])

  @@id([taxonomyUuid, securityUuid])
  @@map("securities_taxonomies")
}

model Session {
  id      String   @id
  sid     String   @unique
  data    String
  expires DateTime

  @@map("sessions")
}

model Taxonomy {
  uuid               String             @id
  parentUuid         String?            @map("parent_uuid")
  rootUuid           String?            @map("root_uuid")
  name               String
  code               String?
  parent             Taxonomy?          @relation("taxonomiesTotaxonomies_parent_uuid", fields: [parentUuid], references: [uuid])
  root               Taxonomy?          @relation("taxonomiesTotaxonomies_root_uuid", fields: [rootUuid], references: [uuid])
  securityTaxonomies SecurityTaxonomy[] @relation("securities_taxonomiesTotaxonomies")
  children           Taxonomy[]         @relation("taxonomiesTotaxonomies_parent_uuid")
  descendants        Taxonomy[]         @relation("taxonomiesTotaxonomies_root_uuid")

  @@map("taxonomies")
}

model User {
  id       Int     @id @default(autoincrement())
  username String  @unique
  password String?

  @@map("users")
}
