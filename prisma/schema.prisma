generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["nativeTypes", "groupBy"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Clientupdate {
  id        Int      @id @default(autoincrement()) @db.Integer
  timestamp DateTime @db.Timestamp(6)
  version   String   @db.VarChar(20)
  country   String?  @db.VarChar(2)
  useragent String?  @db.VarChar(60)

  @@index([country], name: "clientupdates_country")
  @@index([timestamp], name: "clientupdates_timestamp")
  @@index([version], name: "clientupdates_version")
  @@map("clientupdates")
}

model Event {
  id           Int      @id @default(autoincrement()) @db.Integer
  securityId   Int      @map("security_id") @db.Integer
  date         DateTime @db.Date
  type         String   @db.VarChar(10)
  amount       Decimal? @db.Decimal(10, 4)
  currencyCode String?  @map("currency_code") @db.VarChar(3)
  ratio        String?  @db.VarChar(10)
  security     Security @relation(fields: [securityId], references: [id])

  @@index([securityId], name: "events_security_id")
  @@index([securityId, date], name: "events_security_id_date")
  @@index([securityId, type], name: "events_security_id_type")
  @@map("events")
}

model Exchangerate {
  id                Int                 @id @default(autoincrement()) @db.Integer
  baseCurrencyCode  String              @map("base_currency_code") @db.VarChar(3)
  quoteCurrencyCode String              @map("quote_currency_code") @db.VarChar(3)
  prices            ExchangeratePrice[]

  @@unique([baseCurrencyCode, quoteCurrencyCode], name: "exchangerates_base_currency_code_quote_currency_code")
  @@index([baseCurrencyCode], name: "exchangerates_base_currency_code")
  @@index([quoteCurrencyCode], name: "exchangerates_quote_currency_code")
  @@map("exchangerates")
}

model ExchangeratePrice {
  id             Int          @id @default(autoincrement()) @db.Integer
  date           DateTime     @db.Date
  value          Decimal      @db.Decimal(12, 6)
  exchangerateId Int          @map("exchangerate_id") @db.Integer
  exchangerate   Exchangerate @relation(fields: [exchangerateId], references: [id])

  @@unique([exchangerateId, date], name: "exchangerates_prices_exchange_rate_id_date")
  @@index([exchangerateId], name: "exchangerates_prices_exchange_rate_id")
  @@map("exchangerates_prices")
}

model Market {
  id             Int       @id @default(autoincrement()) @db.Integer
  securityId     Int       @map("security_id") @db.Integer
  marketCode     String    @map("market_code") @db.VarChar(4)
  currencyCode   String?   @map("currency_code") @db.VarChar(3)
  firstPriceDate DateTime? @map("first_price_date") @db.Date
  lastPriceDate  DateTime? @map("last_price_date") @db.Date
  symbol         String?   @db.VarChar(10)
  updatePrices   Boolean   @map("update_prices") @db.Boolean
  security       Security  @relation(fields: [securityId], references: [id])
  prices         Price[]

  @@unique([securityId, marketCode], name: "markets_security_id_market_code")
  @@index([securityId], name: "markets_security_id")
  @@map("markets")
}

model Price {
  id       Int      @id @default(autoincrement()) @db.Integer
  marketId Int      @map("market_id") @db.Integer
  date     DateTime @db.Date
  close    Decimal  @db.Decimal(10, 4)
  market   Market   @relation(fields: [marketId], references: [id])

  @@unique([marketId, date], name: "prices_market_id_date")
  @@index([marketId], name: "prices_market_id")
  @@map("prices")
}

model Security {
  id                 Int                @id @default(autoincrement()) @db.Integer
  uuid               String?            @unique @db.Uuid
  name               String?            @db.VarChar(255)
  isin               String?            @db.VarChar(12)
  wkn                String?            @db.VarChar(6)
  symbolXfra         String?            @map("symbol_xfra") @db.VarChar(10)
  symbolXnas         String?            @map("symbol_xnas") @db.VarChar(10)
  symbolXnys         String?            @map("symbol_xnys") @db.VarChar(10)
  securityType       String?            @map("security_type") @db.Text
  events             Event[]
  markets            Market[]
  securityTaxonomies SecurityTaxonomy[] @relation("securitiesTosecurities_taxonomies")

  @@index([isin], name: "securities_isin")
  @@index([name], name: "securities_name")
  @@index([securityType], name: "securities_security_type")
  @@index([symbolXfra], name: "securities_symbol_xfra")
  @@index([symbolXnas], name: "securities_symbol_xnas")
  @@index([symbolXnys], name: "securities_symbol_xnys")
  @@index([wkn], name: "securities_wkn")
  @@map("securities")
}

model SecurityTaxonomy {
  taxonomyUuid String   @map("taxonomy_uuid") @db.Uuid
  securityUuid String   @map("security_uuid") @db.Uuid
  weight       Decimal  @db.Decimal(5, 2)
  security     Security @relation("securitiesTosecurities_taxonomies", fields: [securityUuid], references: [uuid])
  taxonomy     Taxonomy @relation("securities_taxonomiesTotaxonomies", fields: [taxonomyUuid], references: [uuid])

  @@id([taxonomyUuid, securityUuid])
  @@map("securities_taxonomies")
}

model Session {
  id      String   @id @db.Text
  sid     String   @unique @db.Text
  data    String   @db.Text
  expires DateTime @db.Timestamptz(6)

  @@map("sessions")
}

model Taxonomy {
  uuid               String             @id @db.Uuid
  parentUuid         String?            @map("parent_uuid") @db.Uuid
  rootUuid           String?            @map("root_uuid") @db.Uuid
  name               String             @db.Text
  code               String?            @db.Text
  parent             Taxonomy?          @relation("taxonomiesTotaxonomies_parent_uuid", fields: [parentUuid], references: [uuid])
  root               Taxonomy?          @relation("taxonomiesTotaxonomies_root_uuid", fields: [rootUuid], references: [uuid])
  securityTaxonomies SecurityTaxonomy[] @relation("securities_taxonomiesTotaxonomies")
  children           Taxonomy[]         @relation("taxonomiesTotaxonomies_parent_uuid")
  descendants        Taxonomy[]         @relation("taxonomiesTotaxonomies_root_uuid")

  @@unique([rootUuid, code], name: "taxonomies_root_uuid_code")
  @@index([parentUuid], name: "taxonomies_parent_uuid")
  @@index([rootUuid], name: "taxonomies_root_uuid")
  @@map("taxonomies")
}

model User {
  id       Int     @id @default(autoincrement()) @db.Integer
  username String  @db.VarChar(50)
  password String? @db.VarChar(200)

  @@map("users")
}
